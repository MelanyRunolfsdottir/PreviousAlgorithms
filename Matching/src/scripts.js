// Generated by CoffeeScript 1.7.1
(function() {
  var evalSolution, generatePrefs, render;

  generatePrefs = function(size) {
    var humanName, humanNames, prefs, puppyName, puppyNames, _i, _j, _len, _len1;
    humanNames = ["Tadd", "Sandra", "Edward", "Colleen", "Colin", "Bethany", "Gilford", "Ming", "Fredrick", "Megan"];
    puppyNames = ["Buster", "Snuggles", "Ike", "Bernie", "Breakfast", "Napoleon", "Rex", "Louie", "Sprinkles", "Jess"];
    while (humanNames.length < size) {
      humanNames.push("Human" + (humanNames.length + 1));
      puppyNames.push("Puppy" + (puppyNames.length + 1));
    }
    humanNames = _(humanNames).shuffle().slice(0, size);
    puppyNames = _(puppyNames).shuffle().slice(0, size);
    prefs = {
      puppies: {},
      humans: {}
    };
    for (_i = 0, _len = humanNames.length; _i < _len; _i++) {
      humanName = humanNames[_i];
      prefs.humans[humanName] = _(puppyNames).shuffle();
    }
    for (_j = 0, _len1 = puppyNames.length; _j < _len1; _j++) {
      puppyName = puppyNames[_j];
      prefs.puppies[puppyName] = _(humanNames).shuffle();
    }
    return prefs;
  };

  evalSolution = function(prefs, solution, size) {
    var givenHumanNames, givenPuppyNames, happiness, human, i, name, output, pair, puppy, usedHumanNames, usedPuppyNames, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m;
    if (solution.length !== size) {
      console.error("Your solution: ", solution);
      console.error("Required size: ", size);
      throw new Error("The given solution is not the required size");
    }
    for (_i = 0, _len = solution.length; _i < _len; _i++) {
      pair = solution[_i];
      if (!((pair.human != null) && (pair.puppy != null) && _.isString(pair.human) && _.isString(pair.puppy))) {
        console.error("Incorrect pair format: ", pair);
        console.error("Should look like: {human: number, puppy: number}");
        throw new Error("One of your pairs is not the required format");
      }
    }
    usedHumanNames = [];
    usedPuppyNames = [];
    for (_j = 0, _len1 = solution.length; _j < _len1; _j++) {
      pair = solution[_j];
      human = pair.human;
      puppy = pair.puppy;
      if (_.contains(usedHumanNames, human)) {
        console.error("You used " + human + " twice!");
        throw new Error("You used the same human twice");
      }
      if (_.contains(usedPuppyNames, puppy)) {
        console.error("You used " + puppy + " twice!");
        throw new Error("You used the same puppy twice");
      }
    }
    usedHumanNames.sort();
    usedPuppyNames.sort();
    givenHumanNames = _.keys(prefs.humans).sort();
    givenPuppyNames = _.keys(prefs.puppies).sort();
    for (i = _k = 0, _len2 = usedHumanNames.length; _k < _len2; i = ++_k) {
      name = usedHumanNames[i];
      if (name !== givenHumanNames[i]) {
        console.error("" + name + " was not in the list of given humans.");
        throw new Error("Incorrect name used");
      }
    }
    for (i = _l = 0, _len3 = usedPuppyNames.length; _l < _len3; i = ++_l) {
      name = usedPuppyNames[i];
      if (name !== givenPuppyNames[i]) {
        console.error("" + name + " was not in the list of given puppies.");
        throw new Error("Incorrect name used");
      }
    }
    happiness = 0;
    for (_m = 0, _len4 = solution.length; _m < _len4; _m++) {
      pair = solution[_m];
      human = pair.human;
      puppy = pair.puppy;
      happiness += prefs.puppies[puppy].indexOf(human);
      happiness += prefs.humans[human].indexOf(puppy);
    }
    return output = {
      happiness: happiness,
      satisfaction: (happiness * 100) / (2 * size * (size - 1))
    };
  };

  render = function(solution, prefs, result) {
    var $humanRankings, $humans, $puppies, $puppyRankings;
    $humans = $('.humans');
    $puppies = $('.puppies');
    $humanRankings = $('.human-rankings');
    $puppyRankings = $('.puppy-rankings');
    _.each(solution, function(pair, i) {
      var human, puppy;
      human = pair.human;
      puppy = pair.puppy;
      $humans.append($("<td><img class='photo' src='img/" + human + ".jpeg'/></td>"));
      $puppies.append($("<td><img class='photo' src='img/" + puppy + ".jpeg'/></td>"));
      $humanRankings.append($("<td><strong>" + human + "</strong><br><em>" + (prefs.humans[human].indexOf(puppy)) + " points</em></td>"));
      return $puppyRankings.append($("<td><strong>" + puppy + "</strong><br><em>" + (prefs.puppies[puppy].indexOf(human)) + " points</em></td>"));
    });
    $(".happiness").text(result.happiness);
    return $(".satisfaction").text(result.satisfaction.toFixed(2));
  };

  window.initGraphical = function() {
    var prefs, result, size, solution;
    size = 10;
    prefs = generatePrefs(size);
    solution = solve(JSON.parse(JSON.stringify(prefs)), size);
    result = evalSolution(prefs, solution, size);
    return render(solution, prefs, result);
  };

  window.initMultiple = function() {
    var satisfaction, size, trials;
    size = Number($('.sizeSelector').val());
    trials = Number($('.trialsSelector').val());
    $('.size').text(size);
    $('.trials').text(trials);
    console.log(size, trials);
    satisfaction = 0;
    _(trials).times(function() {
      var prefs, result, solution;
      prefs = generatePrefs(size);
      solution = window.solve(JSON.parse(JSON.stringify(prefs)), size);
      result = evalSolution(prefs, solution, size);
      return satisfaction += result.satisfaction;
    });
    return $(".satisfaction").text(satisfaction / trials);
  };

  $('body').on('change', '.sizeSelector, .trialsSelector', _.throttle(window.initMultiple, 1000));

}).call(this);
